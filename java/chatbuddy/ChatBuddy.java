package chatbuddy;

import chatbuddy.command.Command;
import chatbuddy.exception.ChatBuddyException;
import chatbuddy.parser.Parser;
import chatbuddy.storage.Storage;
import chatbuddy.task.TaskList;
import chatbuddy.ui.Ui;

/**
 * The main class for the ChatBuddy program.
 * Handles the initialization of UI, storage, and task list components, and runs the chatbot.
 */
public class ChatBuddy {

    private final Storage storage;
    private TaskList tasks;
    private final Ui ui;

    /**
     * Constructs a new ChatBuddy instance with a specified file path for task storage.
     *
     * @param filePath The path to the file where task data is stored.
     */
    public ChatBuddy(String filePath) {
        ui = new Ui();
        storage = new Storage(filePath);
        initializeChatBuddy();
    }

    /**
     * Initializes the chatbot, displaying the welcome message and loading tasks from storage.
     */
    private void initializeChatBuddy() {
        ui.showWelcome();
        loadTaskList();
    }

    /**
     * Loads tasks from the storage. If an error occurs, it initializes an empty TaskList.
     */
    private void loadTaskList() {
        try {
            tasks = new TaskList(storage.load());
        } catch (ChatBuddyException e) {
            ui.showLoadingError();
            tasks = new TaskList();
        }
    }

    /**
     * Processes the user input, parses it into a command, and executes the command.
     * This method handles exceptions that may occur during the parsing or execution of the command,
     * ensuring that any unexpected errors are caught and displayed to the user.
     *
     * @param input The input provided by the user as a string.
     * @return The response generated by the chatbot based on the user input.
     * If an unexpected error occurs, a message indicating the error is returned.
     */

    public String getResponse(String input) {
        ui.clearOutput();
        try {
            Command command = parseCommand(input);
            if (command == null) {
                return ui.getOutput();
            }
            return executeCommand(command);
        } catch (Exception e) {
            e.printStackTrace();
            ui.showError("An unexpected error occurred: " + e.getMessage());
            return ui.getOutput();
        }
    }

    /**
     * Parses the user input into a Command object.
     *
     * @param input The user input as a string.
     * @return The parsed Command object.
     */
    private Command parseCommand(String input) {
        try {
            return Parser.parse(input);
        } catch (ChatBuddyException e) {
            ui.showError(e.getMessage());
            return null;
        }
    }

    /**
     * Executes the given command and returns the response.
     *
     * @param command The command to be executed.
     * @return The response generated by executing the command.
     */
    private String executeCommand(Command command) {
        if (command == null) {
            return ui.getOutput();
        }
        try {
            return command.execute(tasks, ui, storage);
        } catch (ChatBuddyException e) {
            ui.showError(e.getMessage());
            return ui.getOutput();
        }
    }

    /**
     * Retrieves the welcome message displayed by the chatbot.
     *
     * @return The welcome message.
     */
    public String getWelcomeMessage() {
        return ui.getOutput();
    }
}
