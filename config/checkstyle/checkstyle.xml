<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">

    <module name="FileTabCharacter"/>
        <!-- Checks that there are no tab characters in the file. /t -->

    <module name="NewlineAtEndOfFile">
        <!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings -->
        <property name="lineSeparator" value="lf_cr_crlf"/>
    </module>

    <module name="LineLength">
        <!-- Checks if a line is too long. -->
        <property name="max" value="120"/>
    </module>


    <!-- All Java AST specific tests live under TreeWalker module. -->
    <module name="TreeWalker">

        <!--
        IMPORT CHECKS
        -->

        <module name="RedundantImport"/>
            <!-- Checks for unused import statements.
            An import statement is unused if:
            It's not referenced in the file.
            -->

        <module name="UnusedImports"/>

        <module name="AvoidStarImport"/>

        <!--
        NAMING CHECKS
        -->

        <module name="AbbreviationAsWordInName">
            <!-- Validate abbreviations (consecutive capital letters) length in identifier name -->
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>

        <module name="PackageName">
            <!-- Validates identifiers for package names against the supplied expression. -->
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="TypeName">
            <!-- Validates static, final fields against the expression "^[A-Z][a-zA-Z0-9]*$". -->
        <metadata name="altname" value="TypeName"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="ConstantName">
            <!-- Validates non-private, static, final fields against the expression "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
            <metadata name="altname" value="ConstantName"/>
            <property name="applyToPrivate" value="false"/>
            <message key="name.invalidPattern"
                 value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
            <property name="severity" value="warning"/>
        </module>

        <module name="StaticVariableName">
            <!-- Validates static, non-final fields against the supplied expression. -->
            <metadata name="altname" value="StaticVariableName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="MemberName">
            <!-- Validates non-static members against the supplied expression. -->
            <metadata name="altname" value="MemberName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="MethodName">
            <!-- Validates identifiers for method names against the supplied expression. -->
            <metadata name="altname" value="MethodName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$"/>
        </module>

        <module name="ParameterName">
            <!-- Validates identifiers for method parameters against the expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="warning"/>
        </module>

        <module name="LocalFinalVariableName">
            <!-- Validates identifiers for local final variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="warning"/>
        </module>

        <module name="LocalVariableName">
            <!-- Validates identifiers for local variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
            <property name="severity" value="warning"/>
        </module>

        <!--
        LENGTH and CODING CHECKS
        -->

        <module name="ArrayTypeStyle"/>
            <!-- Checks that array type declarations follow Java-Style
            Java style: public static void main(String[] args) // Allowed
            C style:    public static void main(String args[]) // Not allowed
            -->

        <module name="EmptyCatchBlock"/>
            <!-- Checks if a catch block is empty and does not contain any comments. -->

        <module name="LeftCurly">
            <!-- Checks for placement of the left curly brace ('{'). -->
            <property name="severity" value="warning"/>
        </module>

        <module name="RightCurly">
            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
            the same line. e.g., the following example is fine:
            <pre>
              if {
                ...
              } else
            </pre>
            -->
            <!-- This next example is not fine:
            <pre>
              if {
                ...
              }
              else
            </pre>
            -->
            <property name="severity" value="warning"/>
        </module>

        <module name="NeedBraces">
            <!-- Checks for braces around loop blocks -->
            <!--
            if (true) return 1; // Not allowed

            if (true) { return 1; } // Not allowed

            else if {
              return 1; // else if should always be multi line
            }

            if (true)
              return 1; // Not allowed
            -->
            <property name="allowEmptyLoopBody" value="true"/>
        </module>


        <module name="MultipleVariableDeclarations"/>
            <!-- Checks that each variable declaration is in its own statement and on its own line. -->

        <module name="OneStatementPerLine"/>

        <module name="MissingSwitchDefault"/>


        <module name="VisibilityModifier">
            <!-- Checks that Class variables should never be declared public. -->
            <property name="protectedAllowed" value="true"/>
            <property name="allowPublicFinalFields" value="true"/>
            <property name="ignoreAnnotationCanonicalNames" value="RegisterExtension, TempDir"/>
        </module>

            <!--
            ORDER CHECKS
            -->

        <module name="AtclauseOrder"/>
            <!-- Checks that the order of at-clauses follows the tagOrder default property value order.
                @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated
            -->


        <module name ="DeclarationOrder"/>
            <!-- Checks if the Class and Interface declarations is organized in this order
            1. Class (static) variables. Order: public, protected, package level (no access modifier), private.
            2. Instance variables. Order: public, protected, package level (no access modifier), private.
            3. Constructors
            4. Methods
            -->

        <module name="DefaultComesLast"/>
            <!-- Checks that default is after all cases in a switch statement -->

        <module name="ModifierOrder">
            <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
                 8.4.3.  The prescribed order is:
                 public, protected, private, abstract, static, final, transient, volatile,
                 synchronized, native, strictfp
              -->
        </module>

        <module name="OverloadMethodsDeclarationOrder"/>

        <!--
        WHITESPACE CHECKS
        -->

        <module name="CommentsIndentation"/>
            <!-- Checks that comments are indented relative to their position in the code -->

        <module name="WhitespaceAfter">
            <!-- Checks that commas, semicolons and typecasts are followed by whitespace. -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
        </module>

        <module name="OperatorWrap">
            <!-- Checks that the non-assignment type operator is at the next line in a line wrap.
                 This includes "?", ":", "==", "!=", "/", "+", "-", "*", "%", ">>", ">>>",
                 ">=", ">", "<<", "<=", "<", "^", "|", "||", "&", "&&", "instanceof",
                 "&" when used in a generic upper or lower bounds constraints,
                   e.g. <T extends Foo & Bar>
                 "::" when used as a reference to a method or constructor without arguments.
                   e.g. String::compareToIgnoreCase
            -->
            <property name="tokens" value="QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,
        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>

        <module name="OperatorWrap">
            <!-- Checks that the assignment type operator is at the previous end of line in a line wrap.
                 This includes "=", "/=", "+=", "-=", "*=", "%=", ">>=", ">>>=", "<<=", "^=", "&=".
            -->
            <property name="tokens" value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,
        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
            <property name="option" value="eol"/>
        </module>

        <module name="SeparatorWrap">
            <!-- Checks that the ".", "@" is at the next line in a line wrap. -->
            <property name="tokens" value="DOT, AT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <!-- Checks that the ",", "]", "[", "...", ";", "(" is at the previous end of line in a line wrap. -->
            <property name="tokens" value="COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN"/>
            <property name="option" value="eol"/>
        </module>

        <module name="Indentation">
            <property name="caseIndent" value="0" />
            <property name="throwsIndent" value="8" />
        </module>

        <module name="SingleSpaceSeparator">
            <!-- Validate whitespace surrounding comments as well.

                 a = 1; // Allowed (single space before start of comment)
                 a = 1; /* Allowed (single space before start of comment) */
                 /* Allowed (single space after end of comment) */ a = 1;
                 a = 1;  // Not allowed (more than one space before start of comment)
                 a = 1;  /* Not allowed (more than one space before start of comment) */
                 /* Not allowed (more than one space after end of comment) */  a = 1;

                 This doesn't validate whitespace within comments so a comment /* like  this */ is allowed.
            -->
            <property name="validateComments" value="true"/>
        </module>


    </module>

</module>
