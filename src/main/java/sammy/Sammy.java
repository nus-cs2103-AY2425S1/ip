package sammy;

import sammy.command.Command;
import sammy.task.Task;
import sammy.task.TaskList;

import java.io.IOException;

/**
 * The main class for the Sammy application. Initializes the necessary components such as storage,
 * task list, and user interface, and handles the main program loop.
 */
public class Sammy {

    private static final String ERROR_LOADING_TASKS = "Error loading tasks from file";

    private Storage storage;
    private TaskList tasks;
    private Ui ui;

    /**
     * Initializes the Sammy application by setting up the storage, task list, and user interface.
     *
     * @param filePath The file path where tasks are stored.
     */
    public Sammy(String filePath) {
        assert filePath != null && !filePath.isEmpty() : "File path cannot be null or empty";
        ui = new Ui();
        storage = new Storage(filePath);
        initializeTaskList();
    }

    /**
     * Initializes the TaskList by loading from storage or creating an empty list if loading fails.
     */
    private void initializeTaskList() {
        try {
            tasks = new TaskList(storage.load());
        } catch (IOException e) {
            ui.showErrorMessage(ERROR_LOADING_TASKS);
            tasks = new TaskList();
        }
        assert tasks != null : "TaskList must be initialized";
        assert storage != null : "Storage must be initialized";
        assert ui != null : "UI must be initialized";
    }

    /**
     * Processes user input and returns the appropriate response.
     *
     * @param input The user input command.
     * @return The response generated by executing the command.
     */
    public String getResponse(String input) {
        assert input != null && !input.isEmpty() : "Input cannot be null or empty";
        try {
            String line = ui.showLine();
            Command command = Parser.parse(input);
            return line + command.execute(tasks, ui, storage) + line;
        } catch (SammyException | IOException e) {
            return ui.showErrorMessage(e.getMessage());
        }
    }

    /**
     * Runs the main loop of the Sammy application. Continually reads user commands, executes them,
     * and handles exceptions until the exit command is received.
     */
    public void run() {
        ui.showWelcomeMessage();
        boolean isExit = false;

        while (!isExit) {
            try {
                String fullCommand = ui.readCommand();
                assert fullCommand != null && !fullCommand.isEmpty() : "Command cannot be null or empty";


                processCommand(fullCommand);

                isExit = commandIsExit(fullCommand);


            } catch (SammyException | IOException e) {
                ui.showErrorMessage(e.getMessage());
            } finally {
                ui.showLine();
            }
        }
    }


    /**
     * Processes the given command by parsing and executing it.
     *
     * @param fullCommand The full user command to process.
     * @throws SammyException If the command parsing or execution fails.
     * @throws IOException If an I/O error occurs during command execution.
     */
    private void processCommand(String fullCommand) throws SammyException, IOException {
        ui.showLine();
        Command command = Parser.parse(fullCommand);
        command.execute(tasks, ui, storage);
    }

    /**
     * Determines if the command issued is the exit command.
     *
     * @param fullCommand The full command issued by the user.
     * @return True if the command is the exit command, false otherwise.
     * @throws SammyException If the command parsing fails.
     */
    private boolean commandIsExit(String fullCommand) throws SammyException {
        Command command = Parser.parse(fullCommand);
        return command.isExit();
    }

}


