package nebula.ui;

import nebula.exception.NebulaException;
import nebula.storage.Storage;
import nebula.command.Command;
import nebula.task.TaskList;

import java.io.*;

public class Nebula {

    private Ui ui;
    private TaskList tasks;
    private Parser parser;
    private Storage storage;

    /**
     * Constructs a new Nebula instance.
     * Initializes the user interface, storage, task list, and parser.
     *
     * @param filePath The path of the file where task data is stored.
     */
    public Nebula(String filePath) {
        ui = new Ui();
        storage = new Storage(filePath);
        try {
            tasks = new TaskList(storage.load());
        } catch (NebulaException e) {
            tasks = new TaskList();
        }
        parser = new Parser(filePath, tasks);
    }

    /**
     * Continuously reads user commands, processes them, and executes the corresponding actions
     * until the exit command is given.
     *
     * @throws IOException If there is an issue reading from or writing to files.
     */
    public void run() throws IOException {
        System.out.println(ui.greeting());
        boolean isExit = false;

        while(!isExit) {
            try {
                String fullCommand = ui.readCommand();
                Command c = Parser.parse(fullCommand);
                assert c != null;
                c.execute(tasks, ui, storage);
                isExit = c.isExit();
            } catch (NebulaException e) {
                ui.showError(e.getMessage());
            } finally {
                ui.showLine();
            }
        }
    }

    /**
     * The entry point of the application.
     * Initializes the Nebula application with the provided file path and starts it.
     *
     * @param args Command-line arguments (not used).
     * @throws IOException If there is an issue during the execution of the application.
     */
    public static void main(String[] args) throws IOException {
        new Nebula("./data/nebulaTaskList.txt").run();
    }

//    /**
//     * Generates a response for the user's chat message.
//     */
//    public String getResponse(String input) {
//        return "Nebula heard: " + input;
//    }

    /**
     * Starts the application by displaying a greeting.
     * This method can be called once when the application starts in a GUI environment.
     *
     * @return The greeting message.
     */
    public String start() {
        return ui.greeting();  // Return greeting message for display in the GUI
    }

    /**
     * Generates a response for the user's chat message.
     * Parses and processes the input to execute the appropriate commands.
     *
     * @param input The user's chat message as input.
     * @return The response generated by executing the corresponding command.
     */
    public String getResponse(String input) throws IOException {
        String response = "";
        try {
            Command c = Parser.parse(input);  // Parse the input command
            assert c != null;
            response = c.execute(tasks, ui, storage);  // Execute the command and return the response
        } catch (NebulaException e) {
            response = e.getMessage();  // If there's an error, return the error message
        }
        return response;
    }



}
