/**
 * This code has been refined with the assistance of Copilot to comply with the Java Style Guide.
 * Documentation comments have been generated by Copilot.
 * For further information, please refer to the Ai.md.
 */
package nathanbot.ui;

import nathanbot.commands.CommandHandler;
import nathanbot.commands.CommandType;
import nathanbot.tasks.TaskListStore;

/**
 * Represents the user interface for interacting with the task list.
 */
public class UserInterface {
    private final TaskListStore taskList;

    /**
     * Constructs a UserInterface with the specified TaskList.
     *
     * @param taskList The TaskList to be managed by the UserInterface.
     */
    public UserInterface(TaskListStore taskList) {
        this.taskList = taskList;
    }

    /**
     * Starts the user interface, greeting the user and processing commands in a loop.
     *
     * @return A greeting message.
     */
    public String start() {
        return CommandHandler.handleGreet();
    }

    /**
     * Processes the given user input, and responds with an appropriate output.
     *
     * @param input The user input to process.
     * @return The response based on the input command.
     */
    public String processInput(String input) {
        CommandType commandType = CommandType.fromInput(input);
        switch (commandType) {
        case BREAK:
            return CommandHandler.handleExit();
        case DISPLAY_LIST:
            return CommandHandler.handleDisplayList(taskList);
        case MARK_DONE:
            return CommandHandler.handleMarkCommand(input, "mark ", taskList, true);
        case MARK_UNDONE:
            return CommandHandler.handleMarkCommand(input, "unmark ", taskList, false);
        case TAG:
            return CommandHandler.handleTagCommand(input, taskList);
        case TODO:
            return CommandHandler.handleTodoCommand(input, taskList);
        case DEADLINE:
            return CommandHandler.handleDeadlineCommand(input, taskList);
        case EVENT:
            return CommandHandler.handleEventCommand(input, taskList);
        case DELETE:
            return CommandHandler.handleDeleteCommand(input, taskList);
        case FIND:
            return CommandHandler.handleFindCommand(input, taskList);
        default:
            return CommandHandler.handleUnknownCommand();
        }
    }
}
