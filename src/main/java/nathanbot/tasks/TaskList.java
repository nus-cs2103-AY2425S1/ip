/**
 * This code has been refined with the assistance of Copilot to comply with the Java Style Guide.
 * Documentation comments have been generated by Copilot.
 * For further information, please refer to the Ai.md.
 */
package nathanbot.tasks;

import java.util.ArrayList;

/**
 * Manages a list of tasks.
 */
public class TaskList {
    protected final ArrayList<Task> taskList;

    /**
     * Constructs a TaskList.
     */
    public TaskList() {
        this.taskList = new ArrayList<>();
    }

    /**
     * Adds a task to the task list.
     *
     * @param task The task to be added.
     */
    public void addTask(Task task) {
        taskList.add(task);
    }

    /**
     * Marks the task at the specified index as done.
     *
     * @param index The index of the task to be marked as done.
     */
    public void markAsDone(int index) {
        taskList.get(index).markAsDone();
    }

    /**
     * Marks the task at the specified index as undone.
     *
     * @param index The index of the task to be marked as undone.
     */
    public void markAsUndone(int index) {
        taskList.get(index).unmarkAsDone();
    }

    /**
     * Returns the task at the specified index.
     *
     * @param index The index of the task to be returned.
     * @return The task at the specified index.
     */
    public Task getTask(int index) {
        return taskList.get(index);
    }

    /**
     * Deletes the task at the specified index.
     *
     * @param index The index of the task to be deleted.
     */
    public void deleteTask(int index) {
        taskList.remove(index);
    }

    /**
     * Tags a task at the specified index.
     *
     * @param index The index of the task to be tagged.
     * @param tag The desired tag of the task.
     */
    public void tagTask(int index, String tag) {
        taskList.get(index).setTag(tag);
    }

    /**
     * Returns the number of tasks in the task list.
     *
     * @return The number of tasks in the task list.
     */
    public int listLength() {
        return taskList.size();
    }

    /**
     * Returns if the task list is empty.
     *
     * @return if the task list is empty.
     */
    public boolean isEmpty() {
        return taskList.isEmpty();
    }


    /**
     * Finds tasks that contain the specified string in their description.
     *
     * @param searchString The string to search for in task descriptions.
     * @return A list of tasks that contain the specified string in their description.
     */
    public TaskList find(String searchString) {
        TaskList matchingTasks = new TaskList();
        for (Task task : taskList) {
            if (task.toString().contains(searchString)) {
                matchingTasks.addTask(task);
            }
        }
        return matchingTasks;
    }

    /**
     * Checks if a task is in the Tasklist.
     *
     * @param searchTask The task to search for in TaskList.
     * @return A boolean of whether a task is in the TaskList.
     */
    public boolean containsTask(Task searchTask) {
        for (Task t : taskList) {
            if (t.equals(searchTask)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Returns a string representation of the task list.
     *
     * @return A string representation of the task list.
     */
    @Override
    public String toString() {
        // Logic implemented by me; syntax and formatting recommended by Copilot.
        if (taskList.isEmpty()) {
            return "You have no tasks in the list.\n";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < taskList.size(); i++) {
            sb.append((i + 1)).append(". ").append(taskList.get(i).toString()).append("\n");
        }
        return sb.toString();
    }
}
