package bottle;

import bottle.command.Command;
import bottle.exception.BottleException;
import bottle.task.TaskList;

/**
 * Represents the main application that manages tasks.
 * This class handles user input, processes commands, and interacts with the UI, storage, and task list.
 */
public class Bottle {
    /**
     * The storage for task data.
     */
    private Storage storage;

    /**
     * The parser for command inputs.
     */
    private Parser parser;

    /**
     * The list of tasks managed by the application.
     */
    private TaskList taskList;

    /**
     * The user interface for interacting with the user.
     */
    private Ui ui;

    /**
     * The type of command being processed.
     */
    private String commandType;

    /**
     * Constructs a new Bottle with the specified storage file path.
     *
     * @param filePath the file path for storage
     */
    public Bottle(String filePath) {
        storage = new Storage(filePath);
        parser = new Parser();
        ui = new Ui();
        taskList = new TaskList(storage.loadTasks());
    }

    /**
     * Runs the application, displaying a welcome message and continuously handling user input.
     */
    public void run() {
        ui.printWelcomeMsg();
        while (true) {
            handleUserInput();
        }
    }

    /**
     * Processes the user's input command and returns the response.
     *
     * @param input the user input command
     * @return the response generated by processing the command
     */
    public String getResponse(String input) {
        try {
            return processCommand(input);
        } catch (BottleException e) {
            return e.getMessage();
        }
    }

    /**
     * Parses and executes the command based on user input.
     *
     * @param input the user input command
     * @return the result of executing the command
     * @throws BottleException if there is an error in command processing
     */
    private String processCommand(String input) throws BottleException {
        try {
            Command command = parser.parseCommand(input);
            commandType = command.getClass().getSimpleName();
            assert command != null : "command cannot be null";
            return command.execute(taskList, ui, storage);
        } catch (RuntimeException e) {
            throw new BottleException(e.getMessage());
        }
    }

    /**
     * Returns the type of the last command processed.
     *
     * @return the command type
     */
    public String getCommandType() {
        return commandType;
    }

    /**
     * Handles user input by reading the input and processing the command.
     */
    private void handleUserInput() {
        try {
            String input = ui.getInput();
            processCommand(input);
        } catch (BottleException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * The entry point of the application.
     *
     * @param args the input arguments
     */
    public static void main(String[] args) {
        new Bottle("./data/bottle.txt").run();
    }
}
