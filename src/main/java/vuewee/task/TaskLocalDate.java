package vuewee.task;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.function.Function;

import vuewee.parser.IllegalCommandException;

/**
 * Represents a task date with local date information.
 */
public class TaskLocalDate {
    private LocalDate date;

    /**
     * Constructs a TaskLocalDate object with the given LocalDate.
     *
     * @param date the LocalDate object representing the task date
     */
    private TaskLocalDate(LocalDate date) {
        this.date = date;
    }

    /**
     * Parses the given date string and returns a TaskLocalDate object.
     *
     * @param dateString the date string to be parsed
     * @return TaskLocalDate object representing the parsed date
     * @throws IllegalArgumentException if the date string is invalid
     */
    public static TaskLocalDate parse(String dateString) {
        try {
            LocalDate date = LocalDate.parse(dateString);
            return new TaskLocalDate(date);
        } catch (DateTimeParseException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Creates a parser function that converts a date string to a TaskLocalDate
     * object. Checks that the parsed date is not before the reference date
     * generated by fromGenerator function.
     *
     * @param fromGenerator the function that generates a reference TaskLocalDate
     *                      that must be before the parsed date
     * @return a parser function that converts a date string to a TaskLocalDate
     *         object
     */
    public static Function<String, TaskLocalDate> createParserWithFrom(Function<?, TaskLocalDate> fromGenerator) {
        return (String dateString) -> {
            TaskLocalDate taskDate = TaskLocalDate.parse(dateString);
            TaskLocalDate from = fromGenerator.apply(null);
            if (taskDate.date.isBefore(from.date)) {
                throw new IllegalCommandException("Invalid date. End date " + taskDate + " is before " + from);
            }
            return taskDate;
        };
    }

    /**
     * Serializes the TaskLocalDate object to a string representation. Used in Task
     * storage.
     *
     * @return the serialized string representation of the TaskLocalDate object
     */
    public String serialize() {
        return date.toString();
    }

    /**
     * Deserializes the given string and returns a TaskLocalDate object. Used in
     * Task storage.
     *
     * @param text the string to be deserialized
     * @return a TaskLocalDate object representing the deserialized date
     */
    public static TaskLocalDate deserialize(String text) {
        return TaskLocalDate.parse(text);
    }

    @Override
    public String toString() {
        return date.format(DateTimeFormatter.ofPattern("d MMM yyyy"));
    }
}
