package dave;

import java.io.IOException;

import dave.command.Command;
import dave.exceptions.InvalidCommandException;
import dave.exceptions.InvalidDescriptionException;
import dave.parser.Parser;
import dave.storage.Storage;
import dave.task.TaskList;
import dave.ui.Ui;

/**
 * The main class for the Dave application.
 * It is responsible for initializing components such as the task list, storage, and user interface,
 * and providing responses to user input by processing commands.
 */
public class Dave {

    private final Storage storage;
    private final TaskList tasks;
    private final Ui ui;
    private final String filePath;

    /**
     * Constructs a Dave instance, initializing the user interface, task list, and storage components.
     *
     * @param filePath The file path where tasks will be stored and loaded from.
     */
    public Dave(String filePath) {
        assert filePath != null
                && !filePath.isEmpty() : "File path should not be null or empty"; // Ensure valid file path

        this.ui = new Ui();
        this.tasks = new TaskList();
        this.filePath = filePath;
        this.storage = new Storage(filePath, this.tasks);

        assert storage != null : "Storage should be initialized"; // Ensure storage is initialized
        assert tasks != null : "Task list should be initialized"; // Ensure task list is initialized
        assert ui != null : "UI should be initialized"; // Ensure UI is initialized
    }

    /**
     * Processes user input and gets the appropriate response by executing the corresponding command.
     *
     * @param input The user input.
     * @return The response generated by executing the command or error messages if any exceptions occur.
     */
    public String getResponse(String input) {
        assert input != null && !input.isEmpty() : "Input should not be null or empty"; // Ensure valid input

        try {
            Command c = Parser.parse(input);
            assert c != null : "Parsed command should not be null"; // Ensure the command is valid
            return c.execute(tasks, storage, ui);
        } catch (InvalidCommandException e) {
            return e.getMessage(); // Return message for invalid command
        } catch (InvalidDescriptionException e) {
            return e.getMessage(); // Return message for invalid task description
        } catch (IOException e) {
            return "An error occurred while trying to write to the file."; // Handle IO exceptions
        } catch (Exception e) {
            return "Unexpected error occurred."; // Catch-all for unexpected errors
        }
    }
}
