package duke;

/**
 * The main class for the MentalHealth task management application.
 * It initializes the required components and handles the main application logic.
 */
public class MentalHealth {

    private final Storage storage;
    private TaskList tasks;
    private final Ui ui;

    /**
     * Constructs a {@code MentalHealth} object with the specified file path for data storage.
     * Initializes the user interface, storage, and task list components.
     * If the data loading fails, it initializes an empty task list and shows a loading error.
     *
     * @param filePath The file path where the task data is stored.
     */
    public MentalHealth(String filePath) {
        this.ui = new Ui();
        this.storage = new Storage(filePath);
        try {
            this.tasks = new TaskList(storage.load());
        } catch (MentalHealthException e) {
            ui.showLoadingError();
            this.tasks = new TaskList();
        }
    }

    /**
     * Processes the user's input and returns the appropriate response.
     * This method reads the user's input, parses it into a command, and executes the command.
     * If the command is an exit command, the program will terminate after returning the response.
     *
     * @param input The user's input command as a {@code String}.
     * @return The response generated by executing the user's command.
     */
    public String getResponse(String input) {
        ui.greeting();
        boolean isExit = false;
        String response = "";
        try {
            String fullCommand = ui.readCommand(input);
            Command command = Parser.parse(fullCommand);
            isExit = command.isExit();
            response = command.execute(tasks, ui, storage);
        } catch (MentalHealthException e) {
            response = ui.formatMessage(e.getMessage());
        }
        if (isExit) {
            new Thread(() -> {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignored) {
                    System.out.println(ignored.getMessage());
                }
                System.exit(0);
            }).start();
        }
        return response;
    }
}
