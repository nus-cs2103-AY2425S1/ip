package hypebot.main;

import static hypebot.common.Messages.ERROR_FIX_CORRUPTED_TASK;
import static hypebot.common.Messages.ERROR_LOAD_TASK;

import java.io.FileNotFoundException;
import java.text.MessageFormat;

import hypebot.command.Command;
import hypebot.parser.command.CommandParser;
import hypebot.storage.StorageManager;
import hypebot.task.Task;
import hypebot.tasklist.Tasklist;
import hypebot.ui.cli.UiCli;
import hypebot.ui.cli.UiResponse;
import hypebot.ui.gui.UiGuiMain;
import hypebot.ui.gui.UiGuiMainWindow;

/**
 * The {@code HypeBot} chatbot which the user interacts with.
 * <p>Instantiated in {@link UiGuiMain}, accessed in {@link UiGuiMainWindow}</p>
 *
 * @author Youngseo Park (<a href="https://github.com/youngseopark05">@youngseopark05</a>)
 */
public class HypeBot {
    /** Manages all storage-related tasks: loading, saving tasks to a local file. */
    private final StorageManager storage;

    /** Manages all text outputted to user interface. */
    private final UiCli uiCli;

    /** Makes sense of all user input to executable commands. */
    private final CommandParser commandParser;

    /** Stores all Tasks loaded and created by user during session. */
    private Tasklist tasks;

    /** String of latest command type executed. */
    private String commandType;

    /** Error message when HypeBot had trouble setting up. */
    private String bootingErrorMessage;

    /**
     * Creates a new {@code HypeBot}.
     *
     * @param filePath The file path for tasks to save and load to.
     */
    public HypeBot(String filePath) {
        uiCli = new UiCli();
        storage = new StorageManager(filePath);
        commandParser = new CommandParser();
        try {
            tasks = storage.load();
        } catch (RuntimeException | FileNotFoundException e) {
            commandType = "Error";
            bootingErrorMessage = uiCli.showError(MessageFormat.format(
                    "{0}{1}{2}", ERROR_LOAD_TASK, e.getMessage(), ERROR_FIX_CORRUPTED_TASK
            )).show();
            tasks = new Tasklist();
        }
    }

    /**
     * Returns the {@link UiCli} instance associated with this {@code HypeBot} instance
     * managing all text responses outputted to user interface.
     *
     * @return {@link UiCli} instance associated with this {@code HypeBot}.
     */
    public UiCli getUiCli() {
        return uiCli;
    }

    /**
     * Returns the {@link Tasklist} instance associated with this {@code HypeBot} storing
     * all {@link Task}s loaded from user's local save file by {@link StorageManager}.
     *
     * @return {@link Tasklist} instance associated with this {@code HypeBot} instance.
     */
    public Tasklist getTasks() {
        return tasks;
    }

    /**
     * Triggers parsing of user {@code input} to a {@link Command} by the {@link CommandParser},
     * receives the {@link UiResponse} generated by the execution of the {@link Command} and
     * returns the {@link UiResponse}-associated {@code message}.
     *
     * @param input Full user input from user interface.
     * @return String message to be outputted from {@link UiResponse} of parsed {@link Command}.
     */
    public String getResponse(String input) {
        bootingErrorMessage = null; // De-activate error message.
        try {
            Command c = commandParser.parse(input);
            commandType = c.getClass().getSimpleName(); // Get the type of command.
            return c.execute(tasks, uiCli, storage).show();
        } catch (Exception e) {
            commandType = "Error";
            return uiCli.showError(e.getMessage()).show();
        }
    }

    /**
     * Returns the {@link String} of the latest command type executed.
     *
     * @return {@link String} form of the latest command type executed.
     */
    public String getCommandType() {
        return commandType;
    }

    /**
     * Returns whether a booting error occurred based on whether
     * {@code bootingErrorMessage} was generated during instantiation.
     *
     * @return Whether a booting error occurred.
     */
    public boolean hasBootingError() {
        return bootingErrorMessage != null;
    }

    /**
     * Returns the {@code bootingErrorMessage} generated.
     *
     * @return {@code bootingErrorMessage}.
     */
    public String getBootingErrorMessage() {
        return bootingErrorMessage;
    }
}
