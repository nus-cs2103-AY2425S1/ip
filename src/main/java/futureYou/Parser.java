package futureyou;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import futureyou.exception.FutureYouException;

/**
 * The Parser class deals with making sense of the user command.
 */
public class Parser {
    private static final StringBuilder START_OF_ERROR;
    private static final String DEADLINE_FORMAT = "deadline <task name> /by <YYYY-MM-DD HH:mm>";
    private static final String EVENT_FORMAT = "event <task name> /from <YYYY-MM-DD HH:mm> /to <YYYY-MM-DD HH:mm>";

    static {
        START_OF_ERROR = new StringBuilder("Invalid command format. Expected format: \n");
    }

    /**
     * Parses the task number from the user's command.
     *
     * @param userCommand The command entered by the user.
     * @return The parsed user command.
     */
    public static String parseCommand(String userCommand) {
        assert (userCommand != null);
        String[] userInputs = userCommand.split(" ");

        return userInputs[0].toLowerCase().trim();
    }

    /**
     * Parses the task name from the user's command.
     *
     * @param userCommand The command entered by the user.
     * @return message The message generated by the addTask function in TaskList.
     *  @throws FutureYouException if a task name is empty
     */
    public static String parseToDoTask(String userCommand) throws FutureYouException {
        assert (userCommand != null);
        String taskName = userCommand.substring(5);

        if (taskName.trim().isEmpty()) {
            throw new FutureYouException("Please enter a non empty task name");
        }

        return TaskList.addTask(taskName);
    }

    /**
     * Parses the task name and deadline from the user's command.
     *
     * @param userCommand The command entered by the user.
     * @return message The message generated by the addTask function in TaskList.
     * @throws FutureYouException if an invalid deadline format was keyed in
     */
    public static String parseDeadlineTask(String userCommand) throws FutureYouException{
        assert (userCommand != null);
        try {
            String[] userInputs = userCommand.split("/");

            String taskName = userInputs[0].substring(9, userInputs[0].length() - 1);
            String deadlineString = userInputs[1].substring(3);

            DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
            LocalDateTime deadline = LocalDateTime.parse(deadlineString, format);

            return TaskList.addTask(taskName, deadline);
        } catch (Exception e) {
            StringBuilder errMsg = START_OF_ERROR.append(DEADLINE_FORMAT);
            throw new FutureYouException(errMsg.toString());
        }
    }

    /**
     * Parses the task name, start date time and end date time from the user's
     * command.
     *
     * @param userCommand The command entered by the user.
     * @return message The message generated by the addTask function in TaskList.
     * @throws FutureYouException if an invalid task number was keyed in
     */
    public static String parseEventTask(String userCommand) throws FutureYouException{
        assert (userCommand != null);
        try {
            String[] userInputs = userCommand.split("/");

            String taskName = userInputs[0].substring(6, userInputs[0].length() - 1);
            String startDateTimeString = userInputs[1].substring(5, userInputs[1].length() - 1);
            String endDateTimeString = userInputs[2].substring(3);

            DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");

            LocalDateTime startDateTime = LocalDateTime.parse(startDateTimeString, format);
            LocalDateTime endDateTime = LocalDateTime.parse(endDateTimeString, format);

            return TaskList.addTask(taskName, startDateTime, endDateTime);
        } catch (Exception e) {
            StringBuilder errMsg = START_OF_ERROR.append(EVENT_FORMAT);
            throw new FutureYouException(errMsg.toString());
        }
    }

    /**
     * Parses the task number from the user's command.
     *
     * @param userCommand The command entered by the user.
     * @return The parsed task number.
     * @throws FutureYouException if an invalid task number was keyed in
     */
    public static int parseTaskNumber(String userCommand) throws FutureYouException {
        assert (userCommand != null);
        try {
            String command = parseCommand(userCommand);
            return Integer.parseInt(userCommand.substring(command.length() + 1).trim()) - 1;
        } catch (NumberFormatException e) {
            throw new FutureYouException("Please enter a valid task number!");
        }
    }
}
