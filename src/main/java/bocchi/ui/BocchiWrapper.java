package bocchi.ui;

import bocchi.Bocchi;
import bocchi.command.Command;
import bocchi.command.Parser;
import bocchi.exception.BocchiException;
import javafx.application.Platform;
import javafx.stage.Stage;

import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * A lightweight wrapper that acts as a bridge connecting the backend and the GUI.
 */
public class BocchiWrapper {
    private final Bocchi BOCCHI = new Bocchi();
    private MainWindow mainWindow;
    private Stage stage;

    /**
     * Reads a command; passes it to the chatbot and returns the response.
     *
     * @param input The user's prompt.
     * @return The chatbot's response.
     */
    public String getResponse(String input) {
        try {
            Command command = Parser.parse(input);

            // close the window after 1 second if the command is "bye"
            // code generated by chatGPT
            if (command.getName().equals("bye")) {
                Executors.newScheduledThreadPool(1)
                        .schedule(
                                () -> Platform.runLater(stage::close),
                                1,
                                TimeUnit.SECONDS);
            }

            return BOCCHI.processCommand(command);
        } catch (BocchiException e) {
            return e.getMessage();
        }
    }

    /**
     * Performs clean up before exiting.
     */
    public void onExit() {
        BOCCHI.exit();
    }

    public void setMainWindow(MainWindow mainWindow) {
        this.mainWindow = mainWindow;
        mainWindow.respond(BOCCHI.greet());
    }

    public void setStage(Stage stage) {
        this.stage = stage;
    }
}
