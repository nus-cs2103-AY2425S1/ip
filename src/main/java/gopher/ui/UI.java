package gopher.ui;

import gopher.exception.InvalidTaskNumberException;
import gopher.exception.UnknownCommandException;
import gopher.message.Message;
import gopher.message.MessageType;
import gopher.task.Task;
import gopher.task.TaskList;

/**
 * Represents the UI that handles the user interactions and messages.
 * Generally, it outputs Message Object which represents response generated by
 * Gopher with relevant information such as text, message type etc.
 */
public class UI {
    /**
     * Converts a String text to a Message that can be returned by Gopher.
     *
     * @param text text to be contained in a message
     * @return Message object with the given text as its content
     */
    public static Message getMessage(String text) {
        return new Message(text, MessageType.TEXT);
    }

    /**
     * Converts a String text that represents an error message to a Message object
     * whose type is MessageType.ERROR.
     *
     * @param e exception caught by Gopher
     * @return Message object of type MessageType.ERROR with the exception's error message as its content
     */
    public static Message getErrorMessage(Exception e) {
        return new Message(e.getMessage(), MessageType.ERROR);
    }

    /**
     * Alternative implementation of getErrorMessage, which takes in a String text
     * and convert it to a Message of type MessageType.ERROR.
     *
     * @param text error message to be shown to the user
     * @return Message object of type MessageType.ERROR with the given text as its content
     */
    public static Message getErrorMessage(String text) {
        return new Message(text, MessageType.ERROR);
    }

    /**
     * Gets the greeting message to show to the user
     *
     * @return Message object with greeting message to the user
     */
    public static Message getGreetMessage() {
        String text = "Hi, nice to meet you! I am Gopher!\n"
                + "I will be your task managing assistant for today!\n"
                + "If you want me to handle any task-related issues, here are the available commands:\n\n"
                + """
                1. todo [name] - Create a todo task
                2. deadline [name] /by [due date] - Create a deadline that due by the given date
                3. event [name] /from [start date] /to [end date] - Create an Event with specified start and end dates
                4. mark/unmark X Y Z... - Mark tasks at position X Y Z as done/not done
                5. find [keyword] - Find matching tasks based on keywords
                6. delete X Y Z - Delete tasks at position X Y Z
                7. list - List out the current tasks
                8. update X [name] [fields] [detail] - update task at position X with the specified name and fields
                9. bye - End the interaction
                """;
        return UI.getMessage(text);
    }

    /**
     * Gets task visualization for the given TaskList.
     *
     * @param tasks TaskList object to be printed
     * @return Message object containing task list details
     */
    public static Message getTaskListMessage(TaskList tasks) {
        String text = String.format("You currently have %d %s in the task list\n%s%s",
                tasks.getSize(),
                tasks.getSize() <= 1 ? "task" : "tasks",
                tasks,
                tasks.getSize() == 0 ? "Good job! There's no pending tasks to be done!" : "");
        return UI.getMessage(text);
    }

    /**
     * Gets the matched tasks message based on the given matched TaskList.
     *
     * @param tasks TaskList object containing all the matched tasks
     * @return Message object with the matched task list as content
     */
    public static Message getMatchedTasksMessage(TaskList tasks) {
        if (tasks.getSize() == 0) {
            return UI.getMessage("Sorry, I can't find any tasks that matches your keyword...");
        }
        return UI.getMessage(String.format("I have found %d matching %s in your task list:\n%s",
                tasks.getSize(),
                tasks.getSize() == 1 ? "task" : "tasks",
                tasks));
    }

    /**
     * Gets the message when TaskList successfully add in a new task.
     *
     * @param task task to be added
     * @return Message object that shows a task is successfully added
     */
    public static Message getAddTaskMessage(Task task) {
        return UI.getMessage("Got it! I have added this task for you:\n" + task);
    }

    /**
     * Gets the message when a given task is successfully mark as done.
     *
     * @param taskList taskList involved in the operation
     * @param taskNumbers numbers of the tasks being marked as done
     * @return Message object that shows a task is successfully marked as done
     */
    public static Message getMarkAsDoneMessage(TaskList taskList, int[] taskNumbers)
            throws InvalidTaskNumberException {
        StringBuilder message = new StringBuilder(
                String.format("I've marked %s %s as done:\n",
                        taskNumbers.length <= 1 ? "this" : "these",
                        taskNumbers.length <= 1 ? "task" : "tasks"
                ));
        for (int i = 1; i <= taskNumbers.length; i++) {
            message.append(String.format("%d. %s", i, taskList.getTask(taskNumbers[i - 1])));
            message.append("\n");
        }
        message.append("Well Done! Keep up the good work!");
        return UI.getMessage(message.toString());
    }

    /**
     * Gets the message when a given task is successfully mark as not done.
     *
     * @param taskList taskList involved in the operation
     * @param taskNumbers numbers of the tasks being marked as not done
     * @return Message object that shows a task is successfully marked as not done
     */
    public static Message getMarkAsUndoneMessage(TaskList taskList, int[] taskNumbers)
            throws InvalidTaskNumberException {
        StringBuilder message = new StringBuilder(
                String.format("Ok, I've marked %s %s as not done yet:\n",
                        taskNumbers.length <= 1 ? "this" : "these",
                        taskNumbers.length <= 1 ? "task" : "tasks"
                ));
        for (int i = 1; i <= taskNumbers.length; i++) {
            message.append(String.format("%d. %s", i, taskList.getTask(taskNumbers[i - 1])));
            message.append("\n");
        }
        return UI.getMessage(message.toString());
    }

    /**
     * Gets the message when TaskList successfully delete a task.
     *
     * @param taskList taskList involved in the operation
     * @param taskNumbers numbers of the tasks being deleted
     * @return Message object that shows a task is successfully deleted
     */
    public static Message getDeleteTaskMessage(TaskList taskList, int[] taskNumbers)
            throws InvalidTaskNumberException {
        StringBuilder message = new StringBuilder(
                String.format("Noted. I've removed %s %s:\n",
                        taskNumbers.length <= 1 ? "this" : "these",
                        taskNumbers.length <= 1 ? "task" : "tasks"
                ));
        for (int i = 1; i <= taskNumbers.length; i++) {
            message.append(String.format("%d. %s", i, taskList.getTask(taskNumbers[i - 1])));
            message.append("\n");
        }
        return UI.getMessage(message.toString());
    }

    /**
     * Gets the exit message.
     *
     * @return Message object that shows a goodbye message
     */
    public static Message getExitMessage() {
        return UI.getMessage("Bye. Hope to see you again soon!");
    }

    /**
     * Gets the helping message when user encounters an UnknownCommandException.
     *
     * @param e UnknownCommandException thrown by the system
     * @return Message object of type MessageType.Error with given exception's error message
     */
    public static Message getUnknownCommandWarning(UnknownCommandException e) {
        return UI.getErrorMessage(e);
    }

    /**
     * Gets the helping message when user inputs invalid date.
     *
     * @return Message object of type MessageType.Error warning user about invalid date or format
     */
    public static Message getInvalidDateWarning() {
        String msg = ("Oops...Seems like you have provided me an invalid date...\n"
                + "Please try again with a valid date in correct format...\n"
                + "Currently I can read date inputs in the following formats:\n"
                + "    1. YYYY-MM-DD\n"
                + "    2. YYYY-MM-DD hh:mm");
        return UI.getErrorMessage(msg);
    }

    /**
     * Gets the message when a given task is successfully updated with the given information.
     *
     * @return Message object that shows a task is successfully updated
     */
    public static Message getUpdateTaskMessage(Task task) {
        String msg = String.format("Alright! I have already updated this task with the given information:\n%s",
                task);
        return UI.getMessage(msg);
    }

    /**
     * Gets the warning message when user inputs an update command without any information.
     *
     * @return Message object with type MessageType.Error that warns user when input task description is empty
     */
    public static Message getEmptyUpdateCommandWarning() {
        String msg = "Sorry, I don't know how you want the task to be updated...\nPlease try again...";
        return UI.getErrorMessage(msg);
    }
}
